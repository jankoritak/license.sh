{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"license.sh Link License-audits utility for your project. Description Link This tool allows you to run license-sh in your project directory to verify the project's software dependencies. The goal is to create an open-source utility that helps companies do a software audit of their 3rd party dependencies. We created license.sh because we wanted a license audit tool that has the following features: Easy to use Simply run license-sh inside your project directory to get a basic overview. Type license-sh --help for more options. Open source - We want this software to be open-source, so that it's available for everyone. It is not an open-source wrapper for an enterprise product. You can freely modify or extend it and run it without limitations. The source code is licensed under MIT license and available at @webscopeio/license.sh Community driven - We were missing a place where IT professionals could help each other with licensing & legal questions. If you email us at hello@license.sh we will add you to our Slack channel. Enterprise ready support (Optional) In case you need more advanced features, we provide you a platform where you can start doing license audits on more professional level with zero-infrastructure and zero-maintenance . Language support Link We currently support the following package managers. We will add more languages soon! Please let us know what languages to prioritize by opening a Github issue and we will let you know once we add support for them. Supported Lanaguages Javascript NPM Yarn Python pipenv Java Maven","title":"Home"},{"location":"#licensesh","text":"License-audits utility for your project.","title":"license.sh"},{"location":"#description","text":"This tool allows you to run license-sh in your project directory to verify the project's software dependencies. The goal is to create an open-source utility that helps companies do a software audit of their 3rd party dependencies. We created license.sh because we wanted a license audit tool that has the following features: Easy to use Simply run license-sh inside your project directory to get a basic overview. Type license-sh --help for more options. Open source - We want this software to be open-source, so that it's available for everyone. It is not an open-source wrapper for an enterprise product. You can freely modify or extend it and run it without limitations. The source code is licensed under MIT license and available at @webscopeio/license.sh Community driven - We were missing a place where IT professionals could help each other with licensing & legal questions. If you email us at hello@license.sh we will add you to our Slack channel. Enterprise ready support (Optional) In case you need more advanced features, we provide you a platform where you can start doing license audits on more professional level with zero-infrastructure and zero-maintenance .","title":"Description"},{"location":"#language-support","text":"We currently support the following package managers. We will add more languages soon! Please let us know what languages to prioritize by opening a Github issue and we will let you know once we add support for them. Supported Lanaguages Javascript NPM Yarn Python pipenv Java Maven","title":"Language support"},{"location":"contribution-guide/","text":"Contribution guide Link This documents guides you on how to contribute to this project. Prerequisites git clone git@github.com:webscopeio/license.sh.git Install pipenv pipenv install && pipenv shell Run license audit of license.sh pipenv run ./license.sh or unit tests pipenv run python -m unittest run style formater black . open documentation with pipenv run mkdocs serve Read Architecture section. Packaging Link In order to distribute & test this package, run python3 setup.py sdist in a home directory. It will generate .tar.gz file in dist/ directory which you can install with pip install <file.tar.gz>","title":"Contribution Guide"},{"location":"contribution-guide/#contribution-guide","text":"This documents guides you on how to contribute to this project. Prerequisites git clone git@github.com:webscopeio/license.sh.git Install pipenv pipenv install && pipenv shell Run license audit of license.sh pipenv run ./license.sh or unit tests pipenv run python -m unittest run style formater black . open documentation with pipenv run mkdocs serve Read Architecture section.","title":"Contribution guide"},{"location":"contribution-guide/#packaging","text":"In order to distribute & test this package, run python3 setup.py sdist in a home directory. It will generate .tar.gz file in dist/ directory which you can install with pip install <file.tar.gz>","title":"Packaging"},{"location":"project-architecture/","text":"Architecture Link This document describes an architecture of this software. It's written in Python and uses pipenv as a package manager. Main Components Link The architecture consists of 4 main components: Project identification - First, we need to identify the type of project in a directory. Basically, license.sh need to know what kind of runner it should use for your project. It could use NpmRunner, Python runner etc. Runners - Runners are the heart of the application, they transitively identify all of the project dependencies and their licenses. The output of a runner is a License Dependency Tree . License analysis - TODO Reporters - Take the input from the runner and output it in various formats. Dependency analysis - Go through project dependencies and look for license files In the following sections, we will describe each of these components in more detail. Project Identification Link Project identification is implemented in a simple function which returns an array of project types. We return an array of types, because there can be multiple projects types in a single directory e.g. Pipfile & package.json next to each other. def get_project_types() -> [ProjectType]: ... ``` ### License analysis License analysis is a process of identifying whether a particular license is in compliance with a current settings optionally defined in `.license-sh.json5` file. #### License normalization ### Runners ### Reporters ## Data structures There are two main data structures that are used in this project.:w 1. License Dependency tree 2. Bad Subtrees Array We will now describe them in more detail. ### License Dependency tree This tree is a completely resolved and expanded dependency tree of an application. Node of this tree looks like this: ```json { \"name\": \"package_name\", \"version\": \"1.0.0\", \"license\": \"MIT\", \"children\": [ { \"name\": \"package_name_2\", \"version\": \"1.0.1\", \"license\": \"Uknown\", \"children\": [ ... ] }, ... ] } It's constructed by each resolver based on package manager metadata e.g. package-lock.json , Pipfile.lock . Licenses are fetched by a resolved from central repositories e.g. NPM or PyPI. Annotated License Dependency tree Link The complete dependency tree is usually not what user wants to see as a result of his/her analysis. What is interesting for an user is to identify which one of the root dependencies is not in allowed licenses and see all problematic paths for that dependency. Annotated License Dependency tree is an extension of a License Dependency Tree. Each node has two more properties: licenseProblem : boolean - identifies whether this specific node's license is problematic within the current whitelist. subtreeProblem : boolean - helps to identify whether this node has a problem within it's own sub dependencies. Reporters use this property in order to show / hide children. They usually don't show them by default if everything is fine and the this property is False .","title":"Project Architecture"},{"location":"project-architecture/#architecture","text":"This document describes an architecture of this software. It's written in Python and uses pipenv as a package manager.","title":"Architecture"},{"location":"project-architecture/#main-components","text":"The architecture consists of 4 main components: Project identification - First, we need to identify the type of project in a directory. Basically, license.sh need to know what kind of runner it should use for your project. It could use NpmRunner, Python runner etc. Runners - Runners are the heart of the application, they transitively identify all of the project dependencies and their licenses. The output of a runner is a License Dependency Tree . License analysis - TODO Reporters - Take the input from the runner and output it in various formats. Dependency analysis - Go through project dependencies and look for license files In the following sections, we will describe each of these components in more detail.","title":"Main Components"},{"location":"project-architecture/#project-identification","text":"Project identification is implemented in a simple function which returns an array of project types. We return an array of types, because there can be multiple projects types in a single directory e.g. Pipfile & package.json next to each other. def get_project_types() -> [ProjectType]: ... ``` ### License analysis License analysis is a process of identifying whether a particular license is in compliance with a current settings optionally defined in `.license-sh.json5` file. #### License normalization ### Runners ### Reporters ## Data structures There are two main data structures that are used in this project.:w 1. License Dependency tree 2. Bad Subtrees Array We will now describe them in more detail. ### License Dependency tree This tree is a completely resolved and expanded dependency tree of an application. Node of this tree looks like this: ```json { \"name\": \"package_name\", \"version\": \"1.0.0\", \"license\": \"MIT\", \"children\": [ { \"name\": \"package_name_2\", \"version\": \"1.0.1\", \"license\": \"Uknown\", \"children\": [ ... ] }, ... ] } It's constructed by each resolver based on package manager metadata e.g. package-lock.json , Pipfile.lock . Licenses are fetched by a resolved from central repositories e.g. NPM or PyPI.","title":"Project Identification"},{"location":"project-architecture/#annotated-license-dependency-tree","text":"The complete dependency tree is usually not what user wants to see as a result of his/her analysis. What is interesting for an user is to identify which one of the root dependencies is not in allowed licenses and see all problematic paths for that dependency. Annotated License Dependency tree is an extension of a License Dependency Tree. Each node has two more properties: licenseProblem : boolean - identifies whether this specific node's license is problematic within the current whitelist. subtreeProblem : boolean - helps to identify whether this node has a problem within it's own sub dependencies. Reporters use this property in order to show / hide children. They usually don't show them by default if everything is fine and the this property is False .","title":"Annotated License Dependency tree"},{"location":"usage/","text":"Usage Link Basic Usage Link License.sh Usage: license-sh config license-sh [options] license-sh <path> [options] license-sh (-h | --help) license-sh --version Options: -h --help Show this screen. -o <reporter> --output <reporter> Output [default: console]. -t --tree Show full dependency tree. -d --debug Debug mode -p --project <project_type> Run only specific project [yarn | npm | maven | pipenv] --dependencies Include dependency license text analysis. Suported: npm, yarn, maven -c --config <config_path> Use custom path to config --version Show version. Prerequisites Link Depends on the project you want to test. Prerequisites Yarn - yarn and node Maven - maven and java Pipenv - python Npm - npm Configuration Link Stored inside .license-sh.json in the root of the project. Generate interactively with license-sh config command. Example: { \"ignored_packages\": { \"python_pipenv\": [ \"PyInquirer\", \"setuptools\" ], \"npm\": [], \"maven\": [], \"yarn\": [] }, \"whitelist\": [ \"MIT\" ] Ignore packages Link \"ignored_packages\": { \"python_pipenv\": [ \"PyInquirer\", \"setuptools\" ], \"npm\": [], \"maven\": [], \"yarn\": [] } You can ignore specific packages if it's license is unknown or you have some reason hat you don't what to see it as an error Whitelist Link \"whitelist\": [ \"MIT\" ] Whitelist is a list of green licenses that shouldn't throw an error if found.","title":"Usage"},{"location":"usage/#usage","text":"","title":"Usage"},{"location":"usage/#basic-usage","text":"License.sh Usage: license-sh config license-sh [options] license-sh <path> [options] license-sh (-h | --help) license-sh --version Options: -h --help Show this screen. -o <reporter> --output <reporter> Output [default: console]. -t --tree Show full dependency tree. -d --debug Debug mode -p --project <project_type> Run only specific project [yarn | npm | maven | pipenv] --dependencies Include dependency license text analysis. Suported: npm, yarn, maven -c --config <config_path> Use custom path to config --version Show version.","title":"Basic Usage"},{"location":"usage/#prerequisites","text":"Depends on the project you want to test. Prerequisites Yarn - yarn and node Maven - maven and java Pipenv - python Npm - npm","title":"Prerequisites"},{"location":"usage/#configuration","text":"Stored inside .license-sh.json in the root of the project. Generate interactively with license-sh config command. Example: { \"ignored_packages\": { \"python_pipenv\": [ \"PyInquirer\", \"setuptools\" ], \"npm\": [], \"maven\": [], \"yarn\": [] }, \"whitelist\": [ \"MIT\" ]","title":"Configuration"},{"location":"usage/#ignore-packages","text":"\"ignored_packages\": { \"python_pipenv\": [ \"PyInquirer\", \"setuptools\" ], \"npm\": [], \"maven\": [], \"yarn\": [] } You can ignore specific packages if it's license is unknown or you have some reason hat you don't what to see it as an error","title":"Ignore packages"},{"location":"usage/#whitelist","text":"\"whitelist\": [ \"MIT\" ] Whitelist is a list of green licenses that shouldn't throw an error if found.","title":"Whitelist"},{"location":"docs/","text":"Welcome to MkDocs Link For full documentation visit mkdocs.org . Commands Link mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit. Project layout Link mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Welcome to MkDocs"},{"location":"docs/#welcome-to-mkdocs","text":"For full documentation visit mkdocs.org .","title":"Welcome to MkDocs"},{"location":"docs/#commands","text":"mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit.","title":"Commands"},{"location":"docs/#project-layout","text":"mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Project layout"}]}